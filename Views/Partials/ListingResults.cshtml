@inherits Umbraco.Web.Mvc.UmbracoViewPage

@{
    var url = Request.Url; // debug

    const int ITEMS_PER_PAGE = 3;

    // get which page the user is currently on (default to the first page if not found)
    int.TryParse(Request.QueryString["page"], out int currentPage);
    if (currentPage == 0) { currentPage = 1; }

    // get all listings, sort by most recent first
    var allListings = Umbraco.Content(Guid.Parse("060b468a-cc88-426b-a612-c391433adde2"))
        .Children()
        .OfType<ListingItem>()
        .Where(x => x.IsVisible())
        .OrderByDescending(x => x.CreateDate);

    // filter listings, based on query parameters
    var types = Request.QueryString["type"]?.Split(',');
    var regions = Request.QueryString["region"]?.Split(',');
    var tags = Request.QueryString["tags"]?.Split(',');
    int.TryParse(Request.QueryString["min-area"], out int minArea);
    int.TryParse(Request.QueryString["min-rooms"], out int minRooms);
    int.TryParse(Request.QueryString["max-price"], out int maxPrice);
    if(maxPrice == 0) { maxPrice = int.MaxValue; }

    var filteredListings = allListings
        .Where(x =>
        {
            if (x.Size < minArea) { return false; }
            if (x.Rooms < minRooms) { return false; }
            if (x.Price > maxPrice) { return false; }

            if ((types != null) && (!types.Contains(x.ListingType))) { return false; }
            if ((regions != null) && (!regions.Contains(x.Region))) { return false; }
            if (tags != null)
            {
                if (x.Tags.Intersect(tags).Count() != tags.Count()) { return false; }
            }

            return true;
        });

    // get the items needed for the current page
    var listings = filteredListings
        .Skip((currentPage - 1) * ITEMS_PER_PAGE)
        .Take(ITEMS_PER_PAGE);

    // calculate how many pages are needed (for the pagination buttons)
    int maxPages = (int)Math.Ceiling(filteredListings.Count() / (double)ITEMS_PER_PAGE);
}


@* results start *@
<div class="row">
    @if (listings.Count() == 0)
    {
        <div class="col">
            No results, try a different set of search terms
        </div>
    }

    @foreach (var item in listings)
    {

        <div class="col-md-4">
            <div class="card-box-a card-shadow card-fading card-fading-isopaque">
                <div class="img-box-a">
                    <img src="@item.Images.First().Url()" alt="" class="img-a img-fluid">
                </div>
                <div class="card-overlay">
                    <div class="card-overlay-a-content">
                        <div class="card-header-a">
                            <h2 class="card-title-a">
                                <span>
                                    @item.Headline
                                </span>
                            </h2>
                        </div>
                        <div class="card-body-a">
                            <div class="price-box d-flex">
                                <a href="@item.Url()" class="price-a">@item.ListingType | @String.Format("{0:# ##0 ##0}", item.Price) kr.</a>
                            </div>
                            <a href="@item.Url()" class="link-a">
                                Click here to view
                                <span class="ion-ios-arrow-forward"></span>
                            </a>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    }
</div>
@* results end *@

@* pagination start *@
<div class="row">
    <div class="col-sm-12">
        <nav class="pagination-a">
            <ul class="pagination justify-content-end">

                @if (currentPage > 1 && maxPages > 1)
                {
                    //back arrrow is active
                    <li class="page-item next">
                        <div class="page-link" onclick="getPage(@( currentPage - 1 ))" tabindex="-1">
                            <span class="ion-ios-arrow-back"></span>
                        </div>
                    </li>
                }
                else
                {
                    // back arrow inactive
                    <li class="page-item disabled">
                        <div class="page-link" tabindex="-1">
                            <span class="ion-ios-arrow-back"></span>
                        </div>
                    </li>
                }

                @for (int i = 1; i <= maxPages; i++)
                {
                    if (i == currentPage)
                    {
                        <li class="page-item active page-selector-current" id="currentpage-@i">
                            @paginationButton(i)
                        </li>
                    }
                    else
                    {
                        <li class="page-item">
                            @paginationButton(i)
                        </li>
                    }
                }

                @if (currentPage < maxPages)
                {
                    //forward arrrow is active
                    <li class="page-item next">
                        <div class="page-link" onclick="getPage(@( currentPage + 1 ))" tabindex="-1">
                            <span class="ion-ios-arrow-forward"></span>
                        </div>
                    </li>
                }
                else
                {
                    // forward arrow inactive
                    <li class="page-item disabled">
                        <div class="page-link" tabindex="-1">
                            <span class="ion-ios-arrow-forward"></span>
                        </div>
                    </li>
                }

            </ul>
        </nav>
    </div>
</div>
@* pagination end *@

@helper paginationButton(int pageNumber)
{
    <div class="page-link" onclick="getPage(@pageNumber)">@pageNumber</div>
}