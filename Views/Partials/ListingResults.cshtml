@inherits Umbraco.Web.Mvc.UmbracoViewPage

@using System.Collections.Specialized
@using Umbraco.Examine

@{
    const int ITEMS_PER_PAGE = 3;

    // search/filter listings, based on query parameters
    IEnumerable<ListingItem> filteredListings;
    var queryString = Request.QueryString;
    var searchTerm = queryString["searchterm"];
    if (searchTerm != null)
    {
        var results = SearchListings(searchTerm);
        filteredListings = results.Select(res => Umbraco.Content(res.Id)).OfType<ListingItem>();
    }
    else
    {
        var content = Umbraco.ContentAtXPath("//listings").First();
        filteredListings = FilterListings(content, queryString);
    }

    // get the items needed for the current page
    int.TryParse(Request.QueryString["page"], out int currentPage);
    if (currentPage == 0) { currentPage = 1; }
    var listings = filteredListings
        .Skip((currentPage - 1) * ITEMS_PER_PAGE)
        .Take(ITEMS_PER_PAGE);

    // calculate how many pages are needed (for the pagination buttons)
    int maxPages = (int)Math.Ceiling(filteredListings.Count() / (double)ITEMS_PER_PAGE);
}

@functions {
    /// <summary>
    /// Returns a subset of ListingItem-s, based on the query params passed.
    /// Will check listing type, region, tags, area, rooms, price (if params are provided)
    /// </summary>
    /// <param name="content">Umbraco.Content</param>
    /// <param name="queryString">Request.QueryString</param>
    /// <returns></returns>
    /// <exception cref="NotImplementedException"></exception>
    public static IEnumerable<ListingItem> FilterListings(
        IPublishedContent content, NameValueCollection queryString)
    {
        // get all listings, sort by most recent first
        var allListings = content
            .Children()
            .OfType<ListingItem>()
            .Where(x => x.IsVisible())
            .OrderByDescending(x => x.CreateDate);

        var types = queryString["type"]?.Split(',');
        var regions = queryString["region"]?.Split(',');
        var tags = queryString["tags"]?.Split(',');
        int.TryParse(queryString["min-area"], out int minArea);
        int.TryParse(queryString["min-rooms"], out int minRooms);
        int.TryParse(queryString["max-price"], out int maxPrice);
        if (maxPrice == 0) { maxPrice = int.MaxValue; }

        var filteredListings = allListings
            .Where(x =>
            {
                if (x.Size < minArea) { return false; }
                if (x.Rooms < minRooms) { return false; }
                if (x.Price > maxPrice) { return false; }

                if ((types != null) && (!types.Contains(x.ListingType))) { return false; }
                if ((regions != null) && (!regions.Contains(x.Region))) { return false; }
                if (tags != null)
                {
                    if (x.Tags.Intersect(tags).Count() != tags.Count()) { return false; }
                }

                return true;
            });

        return filteredListings;
    }

    /// <summary>
    /// Will perform an Examine search on all listing fields
    /// Returns ListingItem-s as ISearchResult-s matching the 'searchTerm'
    /// Convert to IPublihsedContents-s with "Umbraco.Content(result.id)"
    /// Convert those to ListingItem-s with ".OfType<ListingItem>()"
    /// </summary>
    /// <param name="searchTerm"></param>
    /// <returns></returns>
    public static IEnumerable<ISearchResult> SearchListings(string searchTerm)
    {
        ExamineManager.Instance.TryGetIndex("ExternalIndex", out var index);
        var searcher = index.GetSearcher();
        var results = searcher
            .CreateQuery("content")
            .NodeTypeAlias("listingItem")
            .And()
            .ManagedQuery(searchTerm)
            .Execute()
            .Where(res => res.Id != null);

        return results;
    }
}


@* results start *@
<div class="row">
    @if (listings.Count() == 0)
    {
        <div class="col">
            No results, try a different set of search terms
        </div>
    }

    @foreach (var item in listings)
    {

        <div class="col-md-4">
            <div class="card-box-a card-shadow card-fading card-fading-isopaque">
                <div class="img-box-a">
                    <img src="@item.Images.First().Url()" alt="" class="img-a img-fluid">
                </div>
                <div class="card-overlay">
                    <div class="card-overlay-a-content">
                        <div class="card-header-a">
                            <h2 class="card-title-a">
                                <span>
                                    @item.Headline
                                </span>
                            </h2>
                        </div>
                        <div class="card-body-a">
                            <div class="price-box d-flex">
                                <a href="@item.Url()" class="price-a">@item.ListingType | @String.Format("{0:# ##0 ##0}", item.Price) kr.</a>
                            </div>
                            <a href="@item.Url()" class="link-a">
                                Click here to view
                                <span class="ion-ios-arrow-forward"></span>
                            </a>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    }
</div>
@* results end *@

@* pagination start *@
<div class="row">
    <div class="col-sm-12">
        <nav class="pagination-a">
            <ul class="pagination justify-content-end">

                @*back arrrow*@
                <li class="page-item next @((currentPage > 1 && maxPages > 1) ? "" : "disabled")">
                    <div class="page-link" tabindex="-1" onclick="getPage(@( currentPage - 1 ))">
                        <span class="ion-ios-arrow-back"></span>
                    </div>
                </li>


                @for (int i = 1; i <= maxPages; i++)
                {
                    <li class="page-item @(i==currentPage ? "active page-selector-current" : "" )">
                        <div class="page-link" onclick="getPage(@i)">@i</div>
                    </li>
                }

                @*forward arrrow*@
                <li class="page-item next @(currentPage < maxPages ? "" : "disabled")">
                    <div class="page-link" tabindex="-1" onclick="getPage(@( currentPage + 1 ))">
                        <span class="ion-ios-arrow-forward"></span>
                    </div>
                </li>

            </ul>
        </nav>
    </div>
</div>
@* pagination end *@
